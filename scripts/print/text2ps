#!/usr/bin/env perl

use lib '/cdf/home/cplager/bin/print';
use Coloring;

$version = "text2ps v1.5 (cplager+text2ps\@physics.ucla.edu) 031103";
$bin_dir = "/cdf/home/cplager/bin/print";

sub setupConstants {

$startLand =
"%!PS-Adobe-2.0
%%Creator: $version
%%Pages: (atend)
%%PageOrder: Ascending
%%Orientation: Landscape
%%BoundingBox: 0 -$translate $ABSheight $ABSwidth
%%EndComments\n";

$startPort =
"%!PS-Adobe-2.0
%%Creator: $version
%%Pages: (atend)
%%PageOrder: Ascending
%%BoundingBox: 0 -$translate $ABSwidth $ABSheight
%%EndComments\n";

my $bigH = $ABSheight - $margin;
my $bigW = $ABSwidth - $margin;
my $halfH = $ABSheight / 2;
my $halfW = $ABSwidth / 2;
if ($landscape) {
	($bigH, $bigW) = ($bigW, $bigH);
	($halfH, $halfW) = ($halfW, $halfH);
}

$drawBoxCommands =
"/rotateWorld
{
  $halfW $halfH translate
  90 rotate
  -$halfH -$halfW translate
} def

/drawbox
{
  1 setlinewidth
  newpath
  $margin $margin m
  $margin $bigH lineto
  $bigW $bigH lineto
  $bigW $margin lineto
  closepath
  stroke
} def

/drawboxLand
{
  1 setlinewidth
  newpath
  $margin  $margin m
  $bigH  $margin lineto
  $bigH $bigW lineto
  $margin $bigW lineto
  closepath
  stroke
} def\n";

$otherCommands = "
/m { moveto } def
/s { show } def\n\n";

my $largeHeight = 2 * $fontHeight;
$fontCommands = "
/small $fontHeight def
/large $largeHeight def

/MakeFont
{ findfont  % Get the font definition
  exch      % Put the font size before the font's dictionary
  scalefont % Enlarge to needed size from 1 point with visual hinting
} def


/normalFont small /Courier         MakeFont def
/boldFont   small /Courier-Bold    MakeFont def
/italicFont small /Courier-Oblique MakeFont def

/preSetup     {0.75 0.00 0.75 setrgbcolor normalFont setfont} bind def
/keySetup     {0.00 0.00 0.75 setrgbcolor normalFont setfont} bind def
/stringSetup  {0.75 0.00 0.00 setrgbcolor normalFont setfont} bind def
/commentSetup {0.00 0.50 0.00 setrgbcolor italicFont setfont} bind def
/normalSetup  {0.00 0.00 0.00 setrgbcolor normalFont setfont} bind def

";
}

sub startDocument {
	if ($landscape) {
		print "$startLand\n";
	} else {
		print "$startPort\n";
	}
	print "$fontCommands\n$drawBoxCommands\n$otherCommands\n";
}

sub startPage {
	my ($useColumns) = @_;
	if ($useColumns && (1 != $curColumn)) {
		$linesPrinted = 0;
		my $colOffset = $margin + ($realWidth / $columns) * ($curColumn - 1);
		#$curWidth = $colOffset + 0.5 * $fontWidth; # fix this
		$curWidth = $colOffset + ($realWidth - $pointWide) / (2 * $columns);
		$useWide = $numWide;
		if ($printLineNumbers) {
			my $maxline = $lineNum + $numHigh + 2;
			$numDigits = int (log($maxline)/log(10)) + 1;
			if ($numDigits < 3) {
				$numDigits = 3;
			}
			$widthNumbers = ($numDigits + 0.5) * $fontWidth;
			$useWide = $numWide - $numDigits - 1;
			$curWidth += ($numDigits + 1) * $fontWidth;
			# now draw grey box
			$lowX = $colOffset;
			$uppX = $colOffset + $widthNumbers;
			$lowY = $margin;
			$uppY = $ABSheight - $margin;
			print "0 setlinewidth\n";
			print "$greycolor setgray\n";
			print "newpath\n$lowX $lowY m\n$lowX $uppY lineto\n";
			print "$uppX $uppY lineto\n$uppX $lowY lineto\nclosepath\nfill\n";
			print "0 setgray\n";
			print "newpath\n$lowX $lowY m\n$lowX $uppY lineto\n";
			print "$uppX $uppY lineto\n$uppX $lowY lineto\nclosepath\nstroke\n";
		} else {
			# if we're not displaying numbers, draw a line
			$lowY = $margin;
			$uppY = $ABSheight - $margin;
			print "newpath\n$colOffset $lowY m\n$colOffset $uppY lineto\nstroke\n";
		}
			return;
	}
	print "%%Page: $pageNum $pageNum\ngsave\n";
	print "0 -$translate translate\n" if ($translate);
	# rotate world if necessary
	print "rotateWorld\n" if ($landscape);
	# print line number box
	if ($printLineNumbers) {
		my $maxline = $lineNum + $numHigh + 2;
		$numDigits = int (log($maxline)/log(10)) + 1;
		if ($numDigits < 3) {
			$numDigits = 3;
		}
		$widthNumbers = ($numDigits + 0.5) * $fontWidth;
		$useWide = $numWide - $numDigits - 1;
		$curWidth = $startWidth + ($numDigits + 1) * $fontWidth;
		# now draw grey box
		$lowX = $margin;
		$uppX = $margin + $widthNumbers;
		$lowY = $margin;
		$uppY = $ABSheight - $margin;
		print "0 setlinewidth\n";
		print "$greycolor setgray\n";
		print "newpath\n$lowX $lowY m\n$lowX $uppY lineto\n";
		print "$uppX $uppY lineto\n$uppX $lowY lineto\nclosepath\nfill\n";
		print "0 setgray\n";
		print "newpath\n$lowX $lowY m\n$lowX $uppY lineto\n";
		print "$uppX $uppY lineto\n$uppX $lowY lineto\nclosepath\nstroke\n";
	} else {
		# we still need to move where the column starts if we have multiple
		# columns per page
		$curWidth = $startWidth; # fix multi-column no line number bug
	}
	print "normalSetup\n";
	++$pageNum;
	++$filePageNum;
	$linesPrinted = 0;
	# do we need to figure out how many columns for numbers?
	if ($printHeaders) {
		# now draw header box
		$lowX = $margin;
		$uppX = $ABSwidth - $margin;
		$lowY = $ABSheight - $margin - 2 * $fontHeight;
		$uppY = $ABSheight - $margin;
		print "/printHeader\n{\n";
		print "% Start header\n";
		print "$greycolor setgray\n";
		print "newpath\n$lowX $lowY m\n$lowX $uppY lineto\n";
		print "$uppX $uppY lineto\n$uppX $lowY lineto\nclosepath\nfill\n";
		print "0 setgray\n";
		print "newpath\n$lowX $lowY m\n$lowX $uppY lineto\n";
		print "$uppX $uppY lineto\n$uppX $lowY lineto\nclosepath\nstroke\n";
		print "% Stop header\n";
		# print file name in the middle
		$curHeight = $startHeight =
			$ABSheight - $heightOffset - (2 * $fontHeight);
		$numHigh = int ($realHeight / $fontHeight - 1) - 2;
		my $startX = $ABSwidth / 2 - $fontWidth * length($filename);
		my $startY = $ABSheight - $margin - $fontHeight * 1.5;
		print "large /Courier-Bold MakeFont setfont\n";
        print "$startX $startY m ($filename) s\n";
		print "small /Courier-Bold MakeFont setfont\n";
		# print date on the left
		$startX = $margin + $fontWidth;
		print "$startX $startY m\n ($date) s\n";
		# print page number on the right
		$nicePage = "Page $filePageNum";
		$startX = $ABSwidth - $margin - $fontWidth * (length ($nicePage) + 1);
		print "$startX $startY m\n ($nicePage) s\n";
		print "normalSetup\n";
		print "} def\n";
	}
}

sub endPage {
	my ($useColumn) = @_;
	if ($useColumn && ($curColumn != $columns)) {
		++$curColumn;
		return;
	}
	$curColumn = 1;
	if ($landscape) {
		print "drawboxLand\n\n";
	} else {
		print "drawbox\n\n";
	}
	print "printHeader\n" if ($printHeaders);
	print "showpage\ngrestore\n\n";
}

sub endDocument {
	print "%%Trailer\n%end\n%%EOF\n\n";
}

sub removeTabs {
	my ($string) = @_;
	my $retval = "";
	my $pos = 0;
	chomp $string;
	my @chars = split //, $string;
	foreach (@chars) {
		if (/\t/) {
			$retval .= " " x ($tabs - ($pos % $tabs));
			$pos += $tabs - ($pos % $tabs);
			next;
		}
		++$pos;
		$retval .= $_;
	}
	return $retval;
}

sub manyColorLines {
	my ($line, $limit) = @_;
    # Don't forget blank lines
    if ($line !~ /\S/) {
        # this line is blank
        return ("( ) show\n");
    }
	my @retval = ();
    my $currentTag = "";
    my $used = 0;
    my @parts = break_up_line($line);
    my $debug= join(":", @parts);
    # parts should always be odd
    my $text = shift @parts;
    my $tag = shift @parts;
    my $entry = "";
    while ($text || $tag) {
        # If we are in the middle of a current tag,
        # set the color
        if ($currentTag) {
            $entry .= "$currentTag\n";
        }
        # Is this text too long?
        my $curLimit = $limit - $used;
        if (length ($text) > $curLimit) {
            # this line is too long
            # get what you can
            my $useful = substr ($text, 0, $curLimit);
            $text = substr ($text, $curLimit);
            $useful = cleanText($useful);
            $entry .= "($useful) show\n";
            push @retval, $entry;
            # reset used and entry
            $used = 0;
            $entry = "";
            next;
        } # length is too long
        # So we can just plump all of this text down
        $used += length($text);
        $text = cleanText($text);
        $entry .= "($text) show\n";
        # now lets look at the tag
        my $startOrEnd = isStartOrEndTag($tag);
        if ($startOrEnd eq $Coloring::EndTag) {
            # End tag
            # set the color back to normalSetup
            $entry .= "normalSetup\n";
            $currentTag = "";
        } elsif ($startOrEnd eq $Coloring::StartTag) {
            # start Tag
            # What type of tag
            my $type = typeOfTag($tag);
            if ($type eq $Coloring::comment) {
                $currentTag = "commentSetup";
            } elsif ($type eq $Coloring::string) {
                $currentTag = "stringSetup";
            } elsif ($type eq $Coloring::pre) {
                $currentTag = "preSetup";
            } elsif ($type eq $Coloring::keyword) {
                $currentTag = "keySetup";
            }
        } else {
            # bad tag
        }
        $text = shift @parts;
        $tag = shift @parts;
    } # while
    push @retval, $entry if ($entry);
    return @retval;
}

sub cleanText {
    my $line = shift;
    # deal with special characters
    $line =~ s|\\|\\\\|g; # \ -> \\
    $line =~ s|\(|\\(|g;  # ( -> \(
    $line =~ s|\)|\\)|g;  # ) -> \)
    $line =~ s|%|\\%|g;   # % -> \%
    return $line;
}


sub manyLines {
	my ($line, $limit) = @_;
	my @retval = ();
	while (length($line) > $limit) {
		my $thisLine = substr $line, 0, $limit;
		$line = substr $line, $limit;
        $thisLine = cleanText($line);
		push @retval, "($thisLine) show\n";
	}
	push @retval, "($line) show\n";
	return @retval
}

# I want to have one really long comment 123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890

sub printLine {
	my ($line) = @_;
	$line =~ s/\s+$//; # get rid of blank space at the end of lines
	my @lines;
    # slower, but should work for everything
    @lines = manyColorLines ($line, $useWide);
    #if ($color) {
    #    @lines = manyColorLines ($line, $useWide);
    #} else {
    #    @lines = manyLines ($line, $useWide);
    #}
	$first = "true";
	foreach (@lines) {
		if ($linesPrinted >= $numHigh) {
			endPage($columns);
			startPage($columns);
			$curHeight = $startHeight;
		}
		if ($first && $printLineNumbers) {
			my $numWidth = $startWidth - $fontWidth * 0.15;
			if ($columns) {
				$numWidth += ($realWidth / $columns) * ($curColumn - 1);
			}
			my $digits = int (log($lineNum + 0.5)/log(10)) + 1;
			my $prettyNum;
			if ($numDigits > $digits) {
				$prettyNum = (" " x ($numDigits - $digits)).$lineNum;
			} else {
				$prettyNum = $lineNum;
			}
            print "normalSetup\n";
			print "$numWidth $curHeight m\n($prettyNum) show\n";
		}
		$first = "";
		print "$curWidth $curHeight m\n";
        print "$_\n";

		$curHeight -= $fontHeight;
		++$linesPrinted;
	}
}

sub initVariables{
	$realHeight = $ABSheight - 2 * $margin;
	$realWidth = $ABSwidth - 2 * $margin;
	$fontWidth  = $fontHeight * 0.6;
	$useWide = $numWide = int ($realWidth  / $fontWidth - 1);
	$numHigh = int ($realHeight / $fontHeight - 1);
	$pointWide = $numWide * $fontWidth;
	$pointHigh = $numHigh * $fontHeight;
	$heightOffset = $margin + ($realHeight - $pointHigh) / 2 + $fontHeight;
	$startHeight = $ABSheight - $heightOffset;
	$startWidth  = $margin + ($realWidth - $pointWide) / 2;
	$curHeight = $startHeight;
	$curWidth = $startWidth;
}

##################
## Main Program ##
##################

$pageNum = 1;
$tabs = 4;
$ABSheight = 792;
$ABSwidth  = 612;
$fontHeight = 10;
$lineNum = 0;
$greycolor = 0.9;
$margin = 15;
$translate = 0;
#default settings
$columns = 0; # I suppose it should be 1, but 0 tests differently
$printHeaders = "true";
$printLineNumbers = "true";
$landscape = ""; # false

$help = "$0 -options file1.txt ...
Options:
-c N    Use N Columns
-col    Print out Color highlighted text
-f N    Use Font N points high ($fontHeight default)
-h      This Help screen
-l      Landscape mode
-m N    Use a Margin of N points
-p      Portrait mode
-n      With line Numbers
-nc     Do Not use Color
-nh     No Headers
-nn     No line Numbers
-ti XXX Use TItle XXX instead of what is given
-wh     With Headers
";



# get arguments
while ($ARGV[0] =~ /^-/) {
	$_ = $';
	shift @ARGV;
	# color mode
	if (/^col/i) {
		# Color mode
		$color = "true";
		next;
	}
	# No color mode
	if (/^nc/i) {
		# No Color mode
		$color = "";
		next;
	}
	# landscape
	if (/^l/i) {
		#landscape mode
		$landscape = "true";
		next;
	}
	# portrait
	if (/^p/i) {
		#portrait mode
		$landscape = "";
		next;
	}
	# font size
	if (/^f/i) {
		if ($' =~ /([\d\.]+)/) {
			$fontHeight = $1;
		} elsif ($ARGV[0] =~ /^[\d\.]+$/) {
			$fontHeight = shift @ARGV;
		}
		next;
	}
	# margin
	if (/^m/i) {
		if ($' =~ /([\d\.]+)/) {
			$margin = $1;
		} elsif ($ARGV[0] =~ /^[\d\.]+$/) {
			$margin = shift @ARGV;
		}
		next;
	}
	if (/^c/i) {
		$columns = 2;
		if ($' =~ /(\d+)/) {
			$columns = $1;
		} elsif ($ARGV[0] =~ /^\d+$/) {
			$columns = shift @ARGV;
		}
		next;
	}
	# absolute height
	if (/^ah/i) {
		# 820 for 2up
		if ($' =~ /(\d+)/) {
			$ABSheight = $1;
		} elsif ($ARGV[0] =~ /^\d+$/) {
			$ABSheight = shift @ARGV;
		}
		next;
	}
	# absolute width
	if (/^aw/i) {
		if ($' =~ /(\d+)/) {
			$ABSwidth = $1;
		} elsif ($ARGV[0] =~ /^\d+$/) {
			$ABSwidth = shift @ARGV;
		}
		next;
	}
	# Translate
	if (/^tr/i) {
		# 15 for 2up
		if ($' =~ /(\d+)/) {
			$translate = $1;
		} elsif ($ARGV[0] =~ /^\d+$/) {
			$translate = shift @ARGV;
		}
		next;
	}
    # Title
	if (/^ti/i) {
		if ($' =~ /(\w+)/) {
			$title = $1;
		} else {
			$title = shift @ARGV;
		}
		next;
	}
	# no headers
	if (/^nh/i) {
		$printHeaders = "";
		next;
	}
	# with headers
	if (/^wh/i) {
		$printHeaders = "true";
		next;
	}
	# don't print line numbers
	if ((/^nn/i) || (/^n0/i)) {
		$printLineNumbers = "";
		next;
	}
	# print line numbers
	if (/^n/i) {
		$printLineNumbers = "true";
		next;
	}
	# Tabs
	if (/^t/i) {
		if ($' =~ /(\d+)/) { #';
			$tabs = $1;
		} elsif ($ARGV[0] =~ /^\d+$/) {
			$tabs = shift @ARGV;
		}
		next;
	}
	# help
	if (/^h/i) {
		print STDERR $help;
		exit;
	}
	print STDERR "Unknown option $_\n";
}


if ($landscape) {
	($ABSheight, $ABSwidth) = ($ABSwidth, $ABSheight)
}
setupConstants();
initVariables();
startDocument();

# reset the number wide if we are using columns
if ($columns) {
	$numWide = int ($numWide / $columns);
}

foreach $filename (@ARGV) {
	$start = $stop = 0;
	if ($filename =~ /:(\d+),?(\d*)$/) {
		$filename = $`;
		$start = $1;
		$stop = $2;
	}
	if (! -e $filename) {
		warn "Can't find $filename.  Sorry\n";
		next;
	}
	if ($printHeaders) {
		chomp ($line = `ls -l $filename`);
		@parts = split /\s+/, $line;
		$date = "@parts[5..7]";
	}
    if ($color) {
        # Eventually, we need to figure out which type of program
        # we have.  For now, assume it is C++
        my $type = typeOfFile($filename);
        if ($Coloring::perl eq $type) {
            open (SOURCE, "$bin_dir/perlPreColor.pl $filename|") or
                warn "Couldn't do it, dude.\n", next;
        } elsif ($Coloring::cplusplus eq $type) {
            open (SOURCE, "$bin_dir/cPreColor.pl $filename|") or
                warn "Couldn't do it, dude.\n", next;
        } else {
            # Couldn't guess
            open (SOURCE, $filename) or warn "Couldn't open $filename\n", next;
        }
    } else {
        open (SOURCE, $filename) or warn "Couldn't open $filename\n", next;
    }
	$filename =~ s|.*/||g;
    if ($title) {
        $filename = $title;
    }
	if ($start) {
		$filename .= ":$start..";
		if ($stop) {
			$filename .= $stop;
		}
	}
	$filePageNum = 0;
	$curColumn = 1;
	$lineNum = $start;
	startPage();
	$lineNum = 0;
	while (<SOURCE>) {
		++$lineNum;
		if (($start && (($lineNum < $start))) ||
			($stop &&  (($lineNum > $stop)))) {
			next;
		}
		chomp;
		printLine ( removeTabs($_) );
	}
	endPage();
}

endDocument();
